name: Build and test.

permissions: {}

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

env:
  DISABLE_NATIVE_BINARY_TESTS: 1

jobs:
  linux:
    name: Build and test wheels for Linux 
    permissions:
      contents: read
    if: false
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #python-version: ["3.14", "3.13", "3.12", "3.11", "3.10", "3.9", "3.8"]
        #os: ["macos-15", "macos-15-intel", "ubuntu-24.04", "ubuntu-24.04-arm"]
        #os: ["macos-15-intel"]
        python-version: ["3.8"]
        #python-version: ["3.8", "3.13"]
    steps:
      # No need unless we test with extras 
      #- name: Install prerequisites
      #  run: |
      #    sudo apt-get update
      #    sudo apt-get install libboost-all-dev libgsl0-dev libeigen3-dev

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Install tox
        run: pip install tox

      # Build and run native tests only for Python 3.8
      - name: Build and run native C++ tests
        if: matrix.python-version == '3.8' && env.DISABLE_NATIVE_BINARY_TESTS != '1'
        run: |
          cd similarity_search
          # No extras at least for now
          #cmake . -DWITH_EXTRAS=1
          cmake .
          make -j 8
          ./release/bunit
          ./release/test_integr
          make clean
          # This is a bit paranoid
          rm -rf ./release


      - name: Build and repair Linux wheels
        if: startsWith(matrix.os, 'ubuntu')
        env:
          PYTHON: ${{ matrix.python-version }}
        run: ./build_linux_wheels/deploy.sh

      # Upload artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python-version }}-${{ matrix.os }}
          path: 'python_bindings/dist/*.whl'

  macos-arm64:
    name: macOS ARM64 (M-series)
    if: false
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      # Optional: have Python 3.13 around for any helper scripts
      - uses: actions/setup-python@v5
        with: { python-version: "3.13" }

      - name: Verify architecture
        run: |
          clang -dumpmachine
          python3 -c "import platform; print('machine:', platform.machine())"

      - name: Build & run native C++ tests (arm64)
        if: env.DISABLE_NATIVE_BINARY_TESTS != '1'
        run: |
          cd similarity_search
          cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} .
          make -j"$(sysctl -n hw.ncpu)"
          ./release/bunit
          ./release/test_integr
          make clean && rm -rf release

      - uses: pypa/cibuildwheel@v2.20.0
        env:
          #CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-* cp314-*"
          CIBW_BUILD: "cp38-* cp314-*"
          CIBW_ARCHS_MACOS: "arm64"
          CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=11.0
            ARCHFLAGS="-arch arm64"
            FORCE_MACOS_ARM=1
          CIBW_TEST_COMMAND: "python -c \"import nmslib; print(nmslib.__version__)\""
        with:
          package-dir: python_bindings

      - uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-wheels
          path: wheelhouse/*.whl


  macos-x86_64:
    name: macOS Intel
    if: false
    runs-on: macos-15-intel
    steps:
      - uses: actions/checkout@v4

      # Optional: have Python 3.8 around for any helper scripts
      - uses: actions/setup-python@v5
        with: { python-version: "3.8" }

      - name: Verify architecture
        run: |
          clang -dumpmachine
          python3 -c "import platform; print('machine:', platform.machine())"

      - name: Build & run native C++ tests (x86_64)
        if: env.DISABLE_NATIVE_BINARY_TESTS != '1'
        run: |
          cd similarity_search
          cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} .
          make -j"$(sysctl -n hw.ncpu)"
          ./release/bunit
          ./release/test_integr
          make clean && rm -rf release

      - uses: pypa/cibuildwheel@v2.20.0
        env:
          #CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-* cp314-*"
          CIBW_BUILD: "cp38-* cp313-*"
          CIBW_ARCHS_MACOS: "x86_64"
          CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=10.13
            ARCHFLAGS=
          CIBW_TEST_COMMAND: "python -c \"import nmslib; print(nmslib.__version__)\""
        with:
          package-dir: python_bindings

      - uses: actions/upload-artifact@v4
        with:
          name: macos-x86_64-wheels
          path: wheelhouse/*.whl

  windows:
    name: Build and test wheels for Windows
    permissions:
      contents: read
    if: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #python-version: ["3.14", "3.13", "3.12", "3.11", "3.10", "3.9", "3.8"]
        os: ["windows-11-arm", "windows-2022"]
        #os: ["windows-11-arm"]
        #os: ["windows-2022"]
        python-version: ["3.11"]
    steps:
      # --- Install Python ---
      # --- Setup Python for x64 using action ---
      - uses: actions/setup-python@v5
        if: runner.arch != 'ARM64'
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'
      # For ARM extra work is needed
      - name: Install Python (ARM64 manually, x64 via setup-python)
        shell: pwsh
        run: |
          Write-Host "Runner architecture: $env:RUNNER_ARCH"
          if ($env:RUNNER_ARCH -eq "ARM64") {
              # Note we are adding zero to the path or else it will fail
              $pyver = "${{ matrix.python-version }}.0"
              $url = "https://www.python.org/ftp/python/$pyver/python-$pyver-arm64.exe"
              Write-Host "Downloading ARM64 Python from $url"
              Invoke-WebRequest -Uri $url -OutFile python-installer.exe
              Start-Process python-installer.exe -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1 Include_test=0' -Wait
              Remove-Item python-installer.exe
          } else {
              Write-Host "Installing Python ${{ matrix.python-version }} via setup-python..."
              echo "::add-mask::${{ matrix.python-version }}"
          }
          python --version
          python -c "import platform; print('Python arch:', platform.machine())"
        continue-on-error: false

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install tox
        run: pip install tox

      # Build and run native tests only for Python 3.8
      - name: Build and run native C++ tests
        if: matrix.python-version == '3.8' && env.DISABLE_NATIVE_BINARY_TESTS != '1'
        shell: cmd
        run: |
          echo Locating Visual Studio...
          for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set VSPATH=%%i
          if not exist "%VSPATH%" (
            echo ERROR: Could not locate Visual Studio!
            exit /b 1
          )
          echo Using Visual Studio at %VSPATH%

          if "%RUNNER_ARCH%"=="ARM64" (
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" arm64 || exit /b 1
            set TARGET_ARCH=arm64
          ) else (
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64 || exit /b 1
            set TARGET_ARCH=x64
          )

          cd similarity_search || exit /b 1
          cmake -G "NMake Makefiles" . || exit /b 1
          nmake || exit /b 1

          .\bunit.exe || exit /b 1
          rem .\test_integr.exe || exit /b 1

          del /q *.exe NonMetricSpaceLib.lib || exit /b 1
          nmake clean || exit /b 1

      # ðŸ”¹ Build wheel with uv and test with tox (same pattern as Linux/Mac)
      - name: Build and test Python wheel
        shell: cmd
        run: |
          rem Ensure weâ€™re at the repo root
          cd /d "%GITHUB_WORKSPACE%" || exit /b 1

          rem --- Detect if this is a Windows ARM runner ---
          setlocal EnableDelayedExpansion
          if "%RUNNER_ARCH%"=="ARM64" (
              echo Detected ARM Windows runner.
              set ARCH=armv8.0
          ) else (
              echo Detected Intel Windows runner.
              set ARCH=SSE2
              echo Not an ARM Windows runner. Skipping custom CFLAGS.
          )
          python -c "import os; print('ARCH:', os.environ.get('ARCH'))"

          cd python_bindings || exit /b 1
          uv build --wheel || exit /b 1
          set PYVER=${{ matrix.python-version }}
          set PYVER=%PYVER:.=%
          for %%f in (dist\*.whl) do tox -e py%PYVER% --installpkg "%%f" || exit /b 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python-version }}-windows
          path: 'python_bindings/dist/*.whl'


  source_dist:
    name: Build source distribution
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Build source distribution
        run: |
          cd python_bindings
          python -m pip install --upgrade pip setuptools wheel
          python setup.py sdist

      - name: Upload source artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-dist
          path: python_bindings/dist/*.tar.gz

  aggregate:
    needs:
      - macos-x86_64 
      - macos-arm64
      - linux
      - windows
      - source_dist
    runs-on: ubuntu-24.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-artifacts

      - name: Show combined contents (optional)
        run: ls -R combined-artifacts

      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-platform-builds
          path: combined-artifacts/
