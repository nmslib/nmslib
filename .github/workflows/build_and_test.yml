name: Build and test.

permissions: {}

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

env:
  DISABLE_NATIVE_BINARY_TESTS: 1

jobs:
  build_linux_macos_wheels_and_test:
    name: Build and test wheels for Linux and MacOS
    permissions:
      contents: read
    #if: false  # ðŸ‘ˆ disables the job
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #python-version: ["3.14", "3.13", "3.12", "3.11", "3.10", "3.9", "3.8"]
        #os: ["ubuntu-24.04", "ubuntu-24.04-arm"]
        #os: ["macos-15", "macos-15-intel"]
        #os: ["macos-15", "macos-15-intel", "ubuntu-24.04", "ubuntu-24.04-arm"]
        #python-version: ["3.13"]
        os: ["macos-15-intel"]
        python-version: ["3.8", "3.13"]
    steps:
      # No need unless we test with extras 
      #- name: Install prerequisites
      #  run: |
      #    sudo apt-get update
      #    sudo apt-get install libboost-all-dev libgsl0-dev libeigen3-dev

      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        
      - name: Install tox
        run: pip install tox

      # Build and run native tests only for Python 3.8
      - name: Build and run native C++ tests
        if: matrix.python-version == '3.8' && env.DISABLE_NATIVE_BINARY_TESTS != '1'
        run: |
          cd similarity_search
          # No extras at least for now
          #cmake . -DWITH_EXTRAS=1
          cmake .
          make -j 8
          ./release/bunit
          ./release/test_integr
          make clean
          # This is a bit paranoid
          rm -rf ./release


      - name: Build and repair Linux wheels
        if: startsWith(matrix.os, 'ubuntu')
        env:
          PYTHON: ${{ matrix.python-version }}
        run: ./build_linux_wheels/deploy.sh

      - name: Build MacOS wheels
        if: startsWith(matrix.os, 'macos')
        run: |
          ARCH=$(arch)
          if [[ "$ARCH" == "arm64" ]]; then
            export MACOSX_DEPLOYMENT_TARGET=11.0
          else
            export MACOSX_DEPLOYMENT_TARGET=10.13
          fi
          # Without this setuptools adds -arch arm64 -arch x86_64
          export ARCHFLAGS=""
          echo "Detected architecture: $ARCH"
          echo "Using MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET"
          uv build --wheel python_bindings/
          PYTHON_VER_NO_DOT=${PYTHON_VERSION//./}
          cd python_bindings && tox -e py${PYTHON_VER_NO_DOT} --installpkg dist/*.whl

      # Upload artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python-version }}-${{ matrix.os }}
          path: 'python_bindings/dist/*.whl'

  build_windows_wheels_and_test:
    name: Build and test wheels for Windows
    permissions:
      contents: read
    #if: false  # ðŸ‘ˆ disables the job
    #runs-on: ["windows-2022"]
    runs-on: ["windows-11-arm"]
    strategy:
      matrix:
        #python-version: ["3.14", "3.13", "3.12", "3.11", "3.10", "3.9", "3.8"]
        #python-version: ["3.8", "3.14"]
        python-version: ["3.8"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.os == 'windows-11-arm' && 'arm64' || 'x64' }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install tox
        run: pip install tox

      # Build and run native tests only for Python 3.8
      - name: Build and run native C++ tests
        if: matrix.python-version == '3.8' && env.DISABLE_NATIVE_BINARY_TESTS != '1'
        shell: cmd
        run: |
          echo Locating Visual Studio...
          for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set VSPATH=%%i
          if not exist "%VSPATH%" (
            echo ERROR: Could not locate Visual Studio!
            exit /b 1
          )
          echo Using Visual Studio at %VSPATH%

          if "%RUNNER_ARCH%"=="ARM64" (
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" arm64 || exit /b 1
            set TARGET_ARCH=arm64
          ) else (
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64 || exit /b 1
            set TARGET_ARCH=x64
          )

          cd similarity_search || exit /b 1
          cmake -G "NMake Makefiles" . || exit /b 1
          nmake || exit /b 1

          .\bunit.exe || exit /b 1
          rem .\test_integr.exe || exit /b 1

          del /q *.exe NonMetricSpaceLib.lib || exit /b 1
          nmake clean || exit /b 1

      # ðŸ”¹ Build wheel with uv and test with tox (same pattern as Linux/Mac)
      - name: Build and test Python wheel
        shell: cmd
        run: |
          rem --- Detect if this is a Windows ARM runner ---
          echo Matrix OS is: ${{ matrix.os }}
          if "%RUNNER_ARCH%"=="ARM64" (
              echo Detected ARM Windows runner.
              set CFLAGS=-march=armv8-a
              set CXXFLAGS=%CFLAGS%
              echo CFLAGS=%CFLAGS%
              echo CXXFLAGS=%CXXFLAGS%
          ) else (
              echo Not an ARM Windows runner. Skipping custom CFLAGS.
          )

          cd python_bindings || exit /b 1
          uv build --wheel || exit /b 1
          set PYVER=${{ matrix.python-version }}
          set PYVER=%PYVER:.=%
          for %%f in (dist\*.whl) do tox -e py%PYVER% --installpkg "%%f" || exit /b 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python-version }}-windows
          path: 'python_bindings/dist/*.whl'


  build_source_dist:
    name: Build source distribution
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Build source distribution
        run: |
          cd python_bindings
          python -m pip install --upgrade pip setuptools wheel
          python setup.py sdist

      - name: Upload source artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-dist
          path: python_bindings/dist/*.tar.gz

  aggregate:
    needs:
      - build_linux_macos_wheels_and_test
      - build_windows_wheels_and_test
      - build_source_dist
    runs-on: ubuntu-24.04
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-artifacts

      - name: Show combined contents (optional)
        run: ls -R combined-artifacts

      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-platform-builds
          path: combined-artifacts/
